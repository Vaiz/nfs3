name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  debug_build:
    strategy:
      fail-fast: false
      matrix:
        include:
        - target: x86_64-pc-windows-msvc
          os: windows-latest
        - target: x86_64-unknown-linux-gnu
          os: ubuntu-latest
        - target: aarch64-unknown-linux-gnu
          os: ubuntu-24.04-arm
        - target: x86_64-apple-darwin
          os: macos-latest
        - target: aarch64-apple-darwin
          os: macos-latest

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.target }} (debug)

    steps:
    - uses: actions/checkout@v4
    - uses: Swatinem/rust-cache@v2

    - name: Add target
      run: rustup target add ${{ matrix.target }}

    - name: Build
      run: cargo build --locked --verbose --target ${{ matrix.target }}

    - name: Run tests
      run: cargo test --locked --verbose --all-features --target ${{ matrix.target }}

  msrv_build:
    runs-on: ubuntu-latest
    name: MSRV Build

    steps:
    - uses: actions/checkout@v4
    - uses: Swatinem/rust-cache@v2

    - name: Get MSRV
      id: msrv
      shell: pwsh
      run: |
        $msrv = Select-String '^rust-version' Cargo.toml | Select-Object -First 1 | ForEach-Object {
          ($_ -split '"')[1]
        }
        "msrv=$msrv" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Install toolchain
      run: rustup install ${{ steps.msrv.outputs.msrv }}

    - name: Build
      run: cargo +${{ steps.msrv.outputs.msrv }} build --locked --verbose

  release_build:
    strategy:
      fail-fast: false
      matrix:
        include:
        - target: x86_64-pc-windows-msvc
          os: windows-latest
        - target: x86_64-unknown-linux-gnu
          os: ubuntu-latest
        - target: aarch64-unknown-linux-gnu
          os: ubuntu-24.04-arm
        - target: x86_64-apple-darwin
          os: macos-latest
        - target: aarch64-apple-darwin
          os: macos-latest

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.target }} (release)

    steps:
    - uses: actions/checkout@v4
    - uses: Swatinem/rust-cache@v2

    - name: Add target
      run: rustup target add ${{ matrix.target }}

    - name: Build
      run: cargo build --release --locked --verbose --target ${{ matrix.target }}

    - name: Run tests
      run: cargo test --release --locked --verbose --all-features --target ${{ matrix.target }}

  code_guidelines:
    runs-on: ubuntu-latest
    name: Code guidelines

    steps:
    - uses: actions/checkout@v4

    - name: Update Rust
      run: |
        rustup update
        rustup toolchain install nightly
        rustup component add --toolchain nightly rustfmt

    - name: fmt
      run: cargo +nightly fmt --check

    - name: clippy
      run: cargo clippy --locked --all-targets --all-features -- -D warnings

    - name: machete
      uses: bnjbvr/cargo-machete@main

  linelint:
    runs-on: ubuntu-latest
    name: Linelint

    steps:
      - uses: actions/checkout@v4
      - uses: fernandrone/linelint@0.0.6
        id: linelint
